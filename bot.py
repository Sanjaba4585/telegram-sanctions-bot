import logging
import asyncio
import requests
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

# –¢–µ–ª–µ–≥—Ä–∞–º —Ç–æ–∫–µ–Ω
TOKEN = "8045856936:AAGUsvT_VBd-aj8P_g49qo2jsXliuXUbR5w"

# OpenSanctions API –∫–ª—é—á (–±–µ—Ä–µ–º–æ –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –¥–ª—è –±–µ–∑–ø–µ–∫–∏)
API_KEY = "ee37de2e10cbcfe69c8a659caf465891"
API_URL = "https://api.opensanctions.org"
RNBO_API_URL = "https://api-drs.nsdc.gov.ua/sanctions-registry/subjects"

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∞–Ω–∫—Ü—ñ–π–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ OpenSanctions API —Ç–∞ –†–ù–ë–û
async def check_sanctions(name):
    session = requests.Session()
    session.headers['Authorization'] = f'ApiKey {API_KEY}'
    session.headers['Content-Type'] = 'application/json'
    
    results = ["üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∞–Ω–∫—Ü—ñ–π–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤:" ]
    file_content = "–Ü–º'—è, –°–∞–Ω–∫—Ü—ñ–π–Ω–∏–π —Å–ø–∏—Å–æ–∫\n"

    try:
        # –ó–∞–ø–∏—Ç –¥–æ OpenSanctions API
        response = session.get(f"{API_URL}/search/default?q={name}&api_key={API_KEY}")
        response.raise_for_status()
        data = response.json()

        entities = data.get("results", [])
        if entities:
            results.append("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —É OpenSanctions:")
            for entity in entities:
                entity_name = entity.get("caption", "‚ùì –ù–µ–≤—ñ–¥–æ–º–µ —ñ–º'—è")
                sanction_list = entity.get("datasets", ["–ù–µ–≤—ñ–¥–æ–º–∏–π —Å–ø–∏—Å–æ–∫"])
                formatted_list = ", ".join(sanction_list) if isinstance(sanction_list, list) else sanction_list
                results.append(f"üîπ {entity_name} ‚Äì üìÑ {formatted_list}")
                file_content += f"{entity_name}, {formatted_list}\n"
        else:
            results.append("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É OpenSanctions.")

    except requests.exceptions.RequestException as e:
        results.append(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ OpenSanctions API: {e}")
    
    try:
        # –ó–∞–ø–∏—Ç –¥–æ –±–∞–∑–∏ —Å–∞–Ω–∫—Ü—ñ–π –†–ù–ë–û
        rnbo_response = requests.get(f"{RNBO_API_URL}?last_name={name}&type=individual")
        rnbo_response.raise_for_status()
        rnbo_data = rnbo_response.json()
        
        if rnbo_data.get("data"):
            results.append("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —É —Å–∞–Ω–∫—Ü—ñ–π–Ω–∏—Ö —Å–ø–∏—Å–∫–∞—Ö –†–ù–ë–û:")
            for person in rnbo_data.get("data", []):
                full_name = person.get("full_name", "‚ùì –ù–µ–≤—ñ–¥–æ–º–µ —ñ–º'—è")
                sanction_start = person.get("sanction_start_date", "‚ùì –î–∞—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—è")
                results.append(f"üîπ {full_name} ‚Äì üóì –î–∞—Ç–∞ —Å–∞–Ω–∫—Ü—ñ–π: {sanction_start}")
                file_content += f"{full_name}, {sanction_start}\n"
        else:
            results.append("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∞–Ω–∫—Ü—ñ—è—Ö –†–ù–ë–û.")

    except requests.exceptions.RequestException as e:
        results.append(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Å–∞–Ω–∫—Ü—ñ–π–Ω–æ—ó –±–∞–∑–∏ –†–ù–ë–û: {e}")

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É —Ñ–∞–π–ª
    file_path = "sanctions_check.csv"
    with open(file_path, "w", encoding="utf-8") as file:
        file.write(file_content)

    return "\n".join(results), file_path

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer("–í—ñ—Ç–∞—é! –í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ –æ—Å–æ–±–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É —Å–∞–Ω–∫—Ü—ñ–π–Ω–∏—Ö —Å–ø–∏—Å–∫–∞—Ö.")

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É (–ø—Ä—ñ–∑–≤–∏—â–µ)
@dp.message()
async def handle_name(message: types.Message):
    name = message.text.strip()
    result, file_path = await check_sanctions(name)
    
    if file_path:
        await message.answer(result)
        await message.answer_document(types.FSInputFile(file_path), caption="üìÑ –ü–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∑–±—ñ–≥—ñ–≤")
    else:
        await message.answer(result)

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
